{"remainingRequest":"/Users/mp-alih-me-397/Downloads/code/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mp-alih-me-397/Downloads/code/src/views/AuthPages/Default/RecoverPassword1.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/mp-alih-me-397/Downloads/code/src/views/AuthPages/Default/RecoverPassword1.vue","mtime":1652638352000},{"path":"/Users/mp-alih-me-397/Downloads/code/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mp-alih-me-397/Downloads/code/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/mp-alih-me-397/Downloads/code/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/mp-alih-me-397/Downloads/code/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mp-alih-me-397/Downloads/code/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmxvYWRpbmctYnRuIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1pcS1wcmltYXJ5KSAhaW1wb3J0YW50OwogICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1pcS1wcmltYXJ5KSAhaW1wb3J0YW50OwogICAgcGFkZGluZzogNnB4IDEycHggNnB4IDEycHggIWltcG9ydGFudDsKfQo="},{"version":3,"sources":["RecoverPassword1.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0FA;AACA;AACA;AACA;AACA","file":"RecoverPassword1.vue","sourceRoot":"src/views/AuthPages/Default","sourcesContent":["<template>\n  <div>\n    <h1 class=\"mb-0\">Reset Password</h1>\n    <p>Enter your email address and we'll send you an email with instructions to reset your password.</p>\n    <ValidationObserver ref=\"form\" v-slot=\"{ handleSubmit }\">\n    <form class=\"mt-4\" novalidate @submit.prevent=\"handleSubmit(onSubmit)\">\n      <ValidationProvider vid=\"email\" name=\"Email\" rules=\"required\" v-slot=\"{ errors }\">\n        <div class=\"form-group\">\n          <input type=\"email\" v-model=\"formData.email\" :class=\"'form-control mb-0' +(errors.length > 0 ? ' is-invalid' : '')\"\n                 id=\"email\" aria-describedby=\"emailHelp\" placeholder=\"Email Address\">\n          <div class=\"invalid-feedback\">\n            <span>{{ errors[0] }}</span>\n          </div>\n        </div>\n      </ValidationProvider>\n      <div class=\"d-inline-block w-100\" style=\"display:flex !important;justify-content:center\">\n        <VueLoadingButton\n          class=\"btn btn-primary float-right loading-btn\"\n          aria-label=\"Post message\"\n          @click.native=\"onSubmit\"\n          :loading=\"isLoading\"\n          styled\n        >Reset Password</VueLoadingButton>\n      </div>\n    </form>\n    </ValidationObserver>\n  </div>\n</template>\n<script>\nimport { mapGetters } from 'vuex'\nimport api from '../../../Utils/api'\nimport { findash } from '../../../config/pluginInit'\nimport VueLoadingButton from \"vue-loading-button\";\n\nexport default {\n  name: 'RecoverPassword1',\n  props: ['formType'],\n  mounted () {\n    findash.index()\n  },\n  components: {\n    VueLoadingButton\n  },\n  computed: {\n    ...mapGetters({\n      stateUsers: 'Setting/usersState'\n    })\n  },\n  data: () => ({\n    isLoading: false,\n    formData: {\n      email: ''\n    }\n  }),\n  methods: {\n    onSubmit () {\n      this.isLoading = true;\n      api.post('forget-password', { data: this.formData }).then(res => {\n        if (res.data && res.data.data) {\n          findash.showSnackbar('success', res.data && res.data.message)\n          this.$store.dispatch(`Setting/addUserAction`, { user_id: res.data.data && res.data.data.id })\n          this.$router.replace(`/reset-password`)\n        }\n      }).catch(error => {\n        const Err = (error.response && error.response.data && error.response.data.error) || (error.response && error.response.data && error.response.data.message) || 'The Username/Password is Incorrect.';\n        const user_id = (error.response && error.response.data && error.response.data.user_id) \n        if((Err == 'Your email is not submitted Please complete your registration.') && user_id){\n          this.$store.dispatch(`Setting/addUserAction`, { user_id })\n          this.$router.replace(`/auth/sign-up3`)\n        } else if((Err == 'Your email is not verified.' || Err == 'Your email is not verified Please verify your email.') && user_id) {\n            api.post('resend-email-otp', { data: { user_id: user_id.toString() }}).then(res => {\n              findash.showSnackbar(\"success\", res.data && res.data.message);\n              this.$store.dispatch(`Setting/addUserAction`, { user_id })\n              this.$router.replace(`/auth/sign-up4`)\n            }).catch(error => {\n              findash.showSnackbar('error', \"Unable to send resend otp\")\n            })\n        } else if(Err == 'Your phone number is not verified.' && user_id) {\n          this.$store.dispatch(`Setting/addUserAction`, { user_id })\n          this.$router.replace(`/auth/sign-up2`)\n        }\n        findash.showSnackbar('error', Err)\n      }).finally(() => {\n        this.isLoading = false\n      })\n    }\n  }\n}\n</script>\n<style>\n.loading-btn {\n  background: var(--iq-primary) !important;\n    border-color: var(--iq-primary) !important;\n    padding: 6px 12px 6px 12px !important;\n}\n</style>"]}]}