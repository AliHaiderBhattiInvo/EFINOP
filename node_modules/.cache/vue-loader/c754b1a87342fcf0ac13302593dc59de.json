{"remainingRequest":"/Users/mp-alih-me-397/Downloads/code/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mp-alih-me-397/Downloads/code/src/views/AuthPages/Default/Forms/ResetPasswordForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mp-alih-me-397/Downloads/code/src/views/AuthPages/Default/Forms/ResetPasswordForm.vue","mtime":1652638352000},{"path":"/Users/mp-alih-me-397/Downloads/code/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mp-alih-me-397/Downloads/code/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/mp-alih-me-397/Downloads/code/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mp-alih-me-397/Downloads/code/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IG1hcEdldHRlcnMgfSBmcm9tICd2dWV4JwppbXBvcnQgYXBpIGZyb20gJy4uLy4uLy4uLy4uL1V0aWxzL2FwaScKaW1wb3J0IHsgZmluZGFzaCB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbmZpZy9wbHVnaW5Jbml0JwppbXBvcnQgVnVlTG9hZGluZ0J1dHRvbiBmcm9tICJ2dWUtbG9hZGluZy1idXR0b24iOwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdSZXNldFBhc3N3b3JkRm9ybScsCiAgcHJvcHM6IFsnZm9ybVR5cGUnXSwKICBtb3VudGVkICgpIHsKICAgIGZpbmRhc2guaW5kZXgoKQogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIC4uLm1hcEdldHRlcnMoewogICAgICB1c2VyczogJ1NldHRpbmcvdXNlcnNTdGF0ZScKICAgIH0pCiAgfSwKICBjb21wb25lbnRzOiB7CiAgICBWdWVMb2FkaW5nQnV0dG9uCiAgfSwKICBkYXRhOiAoKSA9PiAoewogICAgaXNMb2FkaW5nOiBmYWxzZSwKICAgIGZvcm1EYXRhOiB7CiAgICAgIG90cDogJycsCiAgICAgIG5ld19wYXNzd29yZDogJycsCiAgICAgIGNvbmZpcm1fcGFzc3dvcmQ6ICcnCiAgICB9CiAgfSksCiAgbWV0aG9kczogewogICAgYXN5bmMgb25TdWJtaXQgKCkgewogICAgICB0aGlzLmlzTG9hZGluZyA9IHRydWU7CiAgICAgIGNvbnN0IHsgbmV3X3Bhc3N3b3JkLCBjb25maXJtX3Bhc3N3b3JkLCBvdHAgfSA9IHRoaXMuZm9ybURhdGE7CiAgICAgIGlmKG5ld19wYXNzd29yZC50b1N0cmluZygpICE9PSBjb25maXJtX3Bhc3N3b3JkLnRvU3RyaW5nKCkpIHsKICAgICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7CiAgICAgICAgICBmaW5kYXNoLnNob3dTbmFja2JhcignZXJyb3InLCAnVGhlIFBhc3N3b3JkIGFuZCBDb25maXJtIFBhc3N3b3JkIHNob3VsZCBiZSBzYW1lLicpOwogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICBjb25zdCB1c2Vyc1N0YXRlID0gKHRoaXMuJHN0b3JlLmdldHRlcnNbJ1NldHRpbmcvdXNlcnNTdGF0ZSddICYmIHRoaXMuJHN0b3JlLmdldHRlcnNbJ1NldHRpbmcvdXNlcnNTdGF0ZSddLmxlbmd0aCA+IDAgJiYgdGhpcy4kc3RvcmUuZ2V0dGVyc1snU2V0dGluZy91c2Vyc1N0YXRlJ11bMV0pIHx8IHt9CiAgICAgIGFwaS5wb3N0KCdyZXNldC1wYXNzd29yZCcsIHsgZGF0YTogT2JqZWN0LmFzc2lnbih7fSwgeyBvdHAsIG5ld19wYXNzd29yZCwgaWQ6ICh1c2Vyc1N0YXRlICYmIHVzZXJzU3RhdGUudXNlcl9pZCkgfHwgJycgfSkgfSkudGhlbihyZXMgPT4gewogICAgICAgIGZpbmRhc2guc2hvd1NuYWNrYmFyKCdzdWNjZXNzJywgcmVzLmRhdGEgJiYgcmVzLmRhdGEubWVzc2FnZSkKICAgICAgICB0aGlzLiRyb3V0ZXIucmVwbGFjZShgL3NpZ24taW4xYCkKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIGNvbnN0IEVyciA9IChlcnJvci5yZXNwb25zZSAmJiBlcnJvci5yZXNwb25zZS5kYXRhICYmIGVycm9yLnJlc3BvbnNlLmRhdGEuZXJyb3IgJiYgZXJyb3IucmVzcG9uc2UuZGF0YS5lcnJvci5tZXNzYWdlKSB8fCAoZXJyb3IucmVzcG9uc2UgJiYgZXJyb3IucmVzcG9uc2UuZGF0YSAmJiBlcnJvci5yZXNwb25zZS5kYXRhLm1lc3NhZ2UpIHx8ICdFbWFpbCBWZXJpZmljYXRpb24gRmFpbGVkLicKICAgICAgICBmaW5kYXNoLnNob3dTbmFja2JhcignZXJyb3InLCBFcnIpCiAgICAgIH0pLmZpbmFsbHkoKCkgPT4gewogICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7CiAgICAgIH0pCiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["ResetPasswordForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ResetPasswordForm.vue","sourceRoot":"src/views/AuthPages/Default/Forms","sourcesContent":["<template>\n  <ValidationObserver ref=\"form\" v-slot=\"{ handleSubmit }\">\n    <form class=\"mt-4\" novalidate @submit.prevent=\"handleSubmit(onSubmit)\">\n        <ValidationProvider vid=\"otp\" name=\"OTP\" rules=\"required\" v-slot=\"{ errors }\">\n        <div class=\"form-group\">\n          <label for=\"otp\">OTP</label>\n          <input type=\"text\" v-model=\"formData.otp\" :class=\"'form-control mb-0' +(errors.length > 0 ? ' is-invalid' : '')\"\n                 id=\"otp\" placeholder=\"Email OTP\">\n          <div class=\"invalid-feedback\">\n            <span>{{ errors[0] }}</span>\n          </div>\n        </div>\n      </ValidationProvider>\n    <ValidationProvider vid=\"new_password\" name=\"Password\" rules=\"required\" v-slot=\"{ errors }\">\n        <div class=\"form-group\">\n          <label for=\"new_password\">Password</label>\n          <input\n            type=\"password\"\n            :class=\"'form-control mb-0' +(errors.length > 0 ? ' is-invalid' : '')\"\n            id=\"new_password\"\n            v-model=\"formData.new_password\"\n            placeholder=\"Password\"\n            required\n          />\n          <div class=\"invalid-feedback\">\n            <span>{{ errors[0] }}</span>\n          </div>\n        </div>\n      </ValidationProvider>\n          <ValidationProvider vid=\"confirm_password\" name=\"Confirm Password\" rules=\"required\" v-slot=\"{ errors }\">\n        <div class=\"form-group\">\n          <label for=\"confirm_password\">Password</label>\n          <input\n            type=\"password\"\n            autocomplete=\"new-password\"\n            :class=\"'form-control mb-0' +(errors.length > 0 ? ' is-invalid' : '')\"\n            id=\"confirm_password\"\n            v-model=\"formData.confirm_password\"\n            placeholder=\"Confirm Password\"\n            required\n          />\n          <div class=\"invalid-feedback\">\n            <span>{{ errors[0] }}</span>\n          </div>\n        </div>\n      </ValidationProvider>\n      <div style=\"display:flex !important;justify-content:center;margin-top:15px;\">\n        <VueLoadingButton\n          class=\"btn btn-primary loading-btn\"\n          aria-label=\"Post message\"\n          @click.native=\"onSubmit\"\n          :loading=\"isLoading\"\n          styled\n        >Submit Password</VueLoadingButton>\n      </div>\n      <div class=\"sign-info\" style=\"position:relative;left:-15px\">\n          <span class=\"dark-color d-inline-block line-height-2\">\n            Already Have Account ?\n              <router-link to=\"/dark/sign-in1\" class=\"iq-waves-effect pr-4\" v-if=\"$route.meta.dark\">\n                Sign in\n              </router-link>\n            <router-link to=\"/sign-in1\" class=\"iq-waves-effect pr-4\" v-else>\n                Sign in\n              </router-link>\n          </span>\n      </div>\n    </form>\n  </ValidationObserver>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\nimport api from '../../../../Utils/api'\nimport { findash } from '../../../../config/pluginInit'\nimport VueLoadingButton from \"vue-loading-button\";\n\nexport default {\n  name: 'ResetPasswordForm',\n  props: ['formType'],\n  mounted () {\n    findash.index()\n  },\n  computed: {\n    ...mapGetters({\n      users: 'Setting/usersState'\n    })\n  },\n  components: {\n    VueLoadingButton\n  },\n  data: () => ({\n    isLoading: false,\n    formData: {\n      otp: '',\n      new_password: '',\n      confirm_password: ''\n    }\n  }),\n  methods: {\n    async onSubmit () {\n      this.isLoading = true;\n      const { new_password, confirm_password, otp } = this.formData;\n      if(new_password.toString() !== confirm_password.toString()) {\n          this.isLoading = false;\n          findash.showSnackbar('error', 'The Password and Confirm Password should be same.');\n          return false;\n      }\n\n      const usersState = (this.$store.getters['Setting/usersState'] && this.$store.getters['Setting/usersState'].length > 0 && this.$store.getters['Setting/usersState'][1]) || {}\n      api.post('reset-password', { data: Object.assign({}, { otp, new_password, id: (usersState && usersState.user_id) || '' }) }).then(res => {\n        findash.showSnackbar('success', res.data && res.data.message)\n        this.$router.replace(`/sign-in1`)\n      }).catch(error => {\n        const Err = (error.response && error.response.data && error.response.data.error && error.response.data.error.message) || (error.response && error.response.data && error.response.data.message) || 'Email Verification Failed.'\n        findash.showSnackbar('error', Err)\n      }).finally(() => {\n        this.isLoading = false;\n      })\n    }\n  }\n}\n</script>\n"]}]}