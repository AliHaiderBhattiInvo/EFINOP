{"remainingRequest":"/Users/mp-alih-me-397/Downloads/code/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mp-alih-me-397/Downloads/code/src/views/AuthPages/Default/Forms/SignIn1Form.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/mp-alih-me-397/Downloads/code/src/views/AuthPages/Default/Forms/SignIn1Form.vue","mtime":1653396920000},{"path":"/Users/mp-alih-me-397/Downloads/code/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mp-alih-me-397/Downloads/code/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/mp-alih-me-397/Downloads/code/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/mp-alih-me-397/Downloads/code/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mp-alih-me-397/Downloads/code/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgppbnB1dDo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbiwKaW5wdXQ6Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24gewogIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTsKICBtYXJnaW46IDA7Cn0KCmlucHV0W3R5cGU9bnVtYmVyXSB7CiAgLW1vei1hcHBlYXJhbmNlOiAndGV4dGZpZWxkJzsKfQoKLmxvYWRpbmctYnRuIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1pcS1wcmltYXJ5KSAhaW1wb3J0YW50OwogICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1pcS1wcmltYXJ5KSAhaW1wb3J0YW50OwogICAgcGFkZGluZzogNnB4IDEycHggNnB4IDEycHggIWltcG9ydGFudDsKfQo="},{"version":3,"sources":["SignIn1Form.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgLA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"SignIn1Form.vue","sourceRoot":"src/views/AuthPages/Default/Forms","sourcesContent":["<template>\n  <ValidationObserver ref=\"form\" v-slot=\"{ handleSubmit, invalid }\">\n    <form class=\"mt-4\" novalidate @submit.prevent=\"handleSubmit(onSubmit)\">\n      <ValidationProvider vid=\"username\" name=\"username\" :rules=\"inputValidation.rules\" v-slot=\"{ errors }\">\n        <div class=\"form-group\"> \n          <div style=\"display:flex\">\n            <div v-if=\"inputValidation.enableCountryCode\" class=\"col-md-2\" style=\"padding:0\">\n              <vue-country-code\n              style=\"height:45px\"\n              @onSelect=\"onSelect\"\n              defaultCountry='us'\n              :onlyCountries=\"['in', 'us']\">\n            </vue-country-code>\n           </div>\n           <div :class=\"inputValidation.enableCountryCode ? 'col-md-10' : 'col-md-12'\" style=\"padding:0\">\n               <input type=\"text\" v-model=\"formData.username\" :class=\"'form-control mb-0' +(errors.length > 0 ? ' is-invalid' : '')\" @input=\"handleChange\"\n                 id=\"username\" placeholder=\"Enter Email/Mobile Number\">  \n                  <div class=\"invalid-feedback\">\n            <span>{{ inputValidation.errors }}</span>\n          </div> \n           </div>\n          </div>\n        </div>\n      </ValidationProvider>\n      <ValidationProvider vid=\"password\" name=\"Password\" rules=\"required\" v-slot=\"{ errors }\">\n        <div class=\"form-group\">\n          <label for=\"passwordInput\">Password</label>\n          <router-link to=\"/password-reset1\" class=\"float-right\">Forgot password?</router-link>\n          <input\n            type=\"password\"\n            autocomplete=\"new-password\"\n            :class=\"'form-control mb-0' +(errors.length > 0 ? ' is-invalid' : '')\"\n            id=\"passwordInput\"\n            v-model=\"formData.password\"\n            placeholder=\"Password\"\n            required\n          />\n          <div class=\"invalid-feedback\">\n            <span>{{ errors[0] }}</span>\n          </div>\n        </div>\n      </ValidationProvider>\n      <div class=\"d-inline-block w-100\">\n        <div class=\"custom-control custom-checkbox d-inline-block mt-2 pt-1\">\n          <input type=\"checkbox\" class=\"custom-control-input\" :id=\"formType\" />\n          <label class=\"custom-control-label\" :for=\"formType\" style=\"color:#1e3d73\">Remember Me</label>\n        </div>\n        <VueLoadingButton\n          class=\"btn btn-primary float-right loading-btn\"\n          aria-label=\"Post message\"\n          :disabled=\"invalid\"\n          @click.native=\"onSubmit\"\n          :loading=\"isLoading\"\n          styled\n        >Sign in</VueLoadingButton>\n      </div>\n      <div class=\"sign-info\" style=\"color: black\">\n        <span class=\"dark-color d-inline-block line-height-2\">\n          Don't have an account?\n          <router-link\n            to=\"/dark/auth/sign-up1\"\n            class=\"iq-waves-effect pr-4\"\n            v-if=\"$route.meta.dark\"\n          >Sign up</router-link>\n          <router-link to=\"/auth/sign-up1\" class=\"iq-waves-effect pr-4\" v-else>Sign up</router-link>\n        </span>\n      </div>\n    </form>\n  </ValidationObserver>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\nimport api, { setAuthToken } from '../../../../Utils/api'\nimport { findash } from '../../../../config/pluginInit'\nimport Vue from \"vue\";\nimport VueCountryCode from \"vue-country-code-select\";\nimport VueLoadingButton from \"vue-loading-button\";\n\nVue.use(VueCountryCode);\n\nexport default {\n  name: 'SignIn1Form',\n  props: ['formType', 'email', 'password'],\n  data: () => ({\n    isLoading: false,\n    inputValidation: {\n      enableCountryCode: false,\n      rules: \"required|email\",\n      errors: 'Email/Mobile Number is not valid'\n    },\n    formData: {\n      password: '',\n      username: ''\n    }\n  }),\n  mounted () {\n    findash.index()\n  },\n  components: {\n    VueLoadingButton\n  },\n  computed: {\n    ...mapGetters({\n      stateUsers: 'Setting/usersState'\n    })\n  },\n  methods: {\n    async onSelect({name, iso2, dialCode}) {\n      this.formData.username = `+${dialCode}${this.formData.username.slice(-10)}`\n    },\n    async handleChange(e) {\n      const val = e.target.value;\n      if(val && parseInt(val) && val.length === 10){\n        this.inputValidation.enableCountryCode = true;\n        this.inputValidation.rules = \"required\";\n      } else {\n        this.inputValidation.enableCountryCode = false;\n        this.inputValidation.rules = \"required|email\";\n      }\n    },\n    async onSubmit () {\n      this.isLoading = true;\n      api.post('login', { data: this.formData }).then(res => {\n        const apiData = res.data && res.data.data || []\n        if(apiData && apiData.session && apiData.session.session){\n          localStorage.setItem('session-key', apiData && apiData.session && apiData.session.session)\n          this.$router.replace('/sign-in2')\n        } else if(apiData && apiData.tokens) {\n          this.$store.dispatch('Setting/authUserAction', {\n            auth: true,\n            user: apiData && apiData.user\n          })\n          localStorage.setItem('access_token', apiData && apiData.tokens && apiData.tokens.access_token || false)\n          localStorage.setItem('refresh_token', apiData && apiData.tokens && apiData.tokens.refresh_token || false)\n          setAuthToken(`Bearer ${apiData && apiData.tokens && apiData.tokens.access_token}`);\n          this.$router.push({ name: 'app.intro' })\n        }\n   \n      }).catch(error => {\n        const Err = (error.response && error.response.data && error.response.data.error && error.response.data.error.message) || (error.response && error.response.data && error.response.data.message) || 'The Username/Password is Incorrect.';\n        const user_id = (error.response && error.response.data && error.response.data.error && error.response.data.error.data && error.response.data.error.data.user_id) \n        \n        if((Err == 'Your email is not submitted Please complete your registration') && user_id){\n          this.$store.dispatch(`Setting/addUserAction`, { user_id })\n          this.$router.replace(`/auth/sign-up3`)\n        } else if((Err == 'Your email is not verified' || Err == 'Your email is not verified Please verify your email') && user_id) {\n            api.post('resend-email-otp', { data: { user_id: user_id.toString() }}).then(res => {\n              findash.showSnackbar(\"success\", res.data && res.data.message);\n              this.$store.dispatch(`Setting/addUserAction`, { user_id })\n              this.$router.replace(`/auth/sign-up4`)\n            }).catch(() => {\n              findash.showSnackbar('error', \"Unable to send resend otp\")\n            })\n        } else if(Err && typeof Err === 'string' && Err.indexOf('Your phone number was not confirmed') > -1 && user_id) {\n            api.post('resend-Mobile-otp', { data: Object.assign({}, { user_id }) }).then(res => {\n              findash.showSnackbar('success', res.data && res.data.message)\n              this.$store.dispatch(`Setting/addUserAction`, { user_id })\n              this.$router.replace(`/auth/sign-up2`)\n            }).catch(resendError => {\n              const Err = (resendError.response && resendError.response.data && resendError.response.data.error) || (resendError.response && resendError.response.data && resendError.response.data.message) || 'Invalid OTP Code.';\n              findash.showSnackbar('error', Err)\n            })\n        } else {\n          findash.showSnackbar('error', Err)\n        }\n      }).finally(() => {\n        setTimeout(() => {\n            this.isLoading = false;\n        }, 3000)\n      })\n    }\n  }\n}\n</script>\n<style>\ninput::-webkit-outer-spin-button,\ninput::-webkit-inner-spin-button {\n  -webkit-appearance: none;\n  margin: 0;\n}\n\ninput[type=number] {\n  -moz-appearance: 'textfield';\n}\n\n.loading-btn {\n  background: var(--iq-primary) !important;\n    border-color: var(--iq-primary) !important;\n    padding: 6px 12px 6px 12px !important;\n}\n</style>\n"]}]}